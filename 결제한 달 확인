from PyQt5 import QtCore, QtGui, QtWidgets
import datetime
from openpyxl import load_workbook,Workbook
from openpyxl.styles import Font
d = datetime.datetime.now()
D = d.day
M = d.month
Y = d.year
y = 0
b = 0


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("결제")## UI창 이름
        Dialog.resize(614, 815)## 창 크기

        self.namelist = QtWidgets.QListWidget(Dialog)
        self.namelist.setGeometry(QtCore.QRect(50, 60, 321, 641))## list 위치 및 크기 조절
        font = QtGui.QFont()## 글자 정보
        font.setPointSize(15)## 글자 크기
        font.setBold(True)## 글자 두껍게
        font.setWeight(75)
        self.namelist.setFont(font)## 글자 폰트 font로 적용
        ####Cname.txt에 있는 정보를 namelist에 불러오기####
        nf = open("Cname.txt",'rt')
        Totalname = nf.readlines()
        Totalname = "".join(Totalname)
        Totalname = Totalname.split(" ")
        self.namelist.clear()
        for x in range(len(Totalname)-1):
            self.namelist.addItem(Totalname[x])

        self.namelist.setObjectName("namelist")
        self.namelist.itemClicked.connect(self.name)## namelist버튼을 눌렀으면 name함수 실행

        import datetime
        ####연도가 바뀌면 다음 연도 엑셀파일 생성####
        d = datetime.datetime.now()
        Y = d.year
        try: 
            wb = load_workbook(str(Y)+"년 결제.xlsx")
            wb.close()
        except:
            make(Y)
            wb = load_workbook(str(Y)+"년 결제.xlsx")
            wb.close()

        self.pay = QtWidgets.QPushButton(Dialog)
        self.pay.setGeometry(QtCore.QRect(410, 460, 151, 101))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.pay.setFont(font)
        self.pay.setObjectName("pay")
        self.pay.clicked.connect(self.key)# pay버튼을 눌렀으면 key함수 실행

        self.name = QtWidgets.QTextBrowser(Dialog)
        self.name.setGeometry(QtCore.QRect(400, 190, 181, 71))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.name.setFont(font)
        self.name.setObjectName("name")

        self.cnt = QtWidgets.QTextBrowser(Dialog)
        self.cnt.setGeometry(QtCore.QRect(400, 370, 181, 71))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.cnt.setFont(font)
        self.cnt.setObjectName("cnt")

        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(400, 300, 181, 61))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")

        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(400, 110, 181, 61))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.textBrowser_2.setFont(font)
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def key(self):
        Y = d.year
        N = self.namelist.currentItem().text()
        ck(self,Y,N)
        


    def name(self):
        self.name.setPlainText(self.namelist.currentItem().text())
        Y = d.year
        N = self.namelist.currentItem().text()
        nm(self,Y,N)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "결제"))
        self.pay.setText(_translate("Dialog", "결제"))
        self.name.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:22pt; font-weight:600; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">""</p></body></html>"))            
        self.cnt.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:22pt; font-weight:600; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">""</p></body></html>"))
        self.textBrowser.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:22pt; font-weight:600; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">결제한 달</p></body></html>"))
        self.textBrowser_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:22pt; font-weight:600; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">이름</p></body></html>"))

def make(Y):
    import datetime
    d = datetime.datetime.now()
    Year = d.year
    if Y == Year:
        nf = open("Cname.txt",'rt')
        Nf = open("YCname.txt",'w')
        Cn = nf.readline()
        Cn = Cn.strip()
        Cn = Cn.split(' ')
        Cn = sorted(Cn)
        Cn = " ".join(Cn)
        Nf.write(Cn)
        nf.close()
        Nf.close()

        Totalname = Cn.split(" ")
        Totalname = sorted(Totalname)
        T = " ".join(Totalname)
        nf = open("YCname.txt",'w')
        NF = open("Cname.txt",'w')
        NF.write(T+" ")
        NF.close()
        nf.write(T+" ")
        nf.close()

    nf = open("YCname.txt",'rt')
    Totalname = nf.readlines()
    Totalname = "".join(Totalname)
    Totalname = Totalname.split(" ")
    nf.close()
    del Totalname[-1]

    wb = Workbook()
    ws = wb.active
    ws.title = '결제한 월'
    f = Font(size=20, bold = True)
    ws['A1'] = str(Y)+"년"
    ws.merge_cells("A1:B1")
    a = ws['A1']
    a.font = f
    for x in range(12):
        ws[chr(98+x)+'3'] = str(x+1)+"월"
    for x in range(len(Totalname)):
        ws["A"+str(4+x)] = Totalname[x]
    wb.save(str(Y)+"년 결제.xlsx")
    wb.close()

def ck(self,Y,N):
    try:
        wb = load_workbook(str(Y-1)+"년 결제.xlsx")
        ws = wb.active

        lst = []
        Name = []## 결제 파일에 있는 사람 이름
        for x in range(500):
            Name.append(ws['A'+str(x+4)].value)
        try:
            idx = Name.index(N)
            for x in range(12):
                lst.append(ws[chr(98+x)+str(4+idx)].value)
            LST = []
            for x in range(len(lst)):
                if lst[x] == None:
                    LST.append(x+1)
            wb.save(str(Y-1)+"년 결제.xlsx")
            wb.close()
            a = [1,2,3,4,5,6,7,8,9,10,11,12]
            b = LST.copy()
            a_sub_b = [x for x in a if x not in b]
            LastMonth = a_sub_b[len(a_sub_b) - 1]
            if LastMonth == 12:
                try:
                    wb = load_workbook(str(Y)+"년 결제.xlsx")
                except:
                    make(Y)
                    wb = load_workbook(str(Y)+"년 결제.xlsx")
                ws = wb.active
                lst = []
                Name = []## 결제 파일에 있는 사람 이름
                for x in range(500):
                    Name.append(ws['A'+str(x+4)].value)
                idx = Name.index(N)
                for x in range(12):
                    lst.append(ws[chr(98+x)+str(4+idx)].value)
                LST = []
                for x in range(len(lst)):
                    if lst[x] == None:
                        LST.append(x+1)
                a = [1,2,3,4,5,6,7,8,9,10,11,12]
                b = LST.copy()
                a_sub_b = [x for x in a if x not in b]
                try:
                    LastMonth = a_sub_b[len(a_sub_b) - 1]
                    if LastMonth == 12:
                        ck(self,Y+1,N)
                    else:
                        ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
                        wb.save(str(Y)+"년 결제.xlsx")
                        wb.close()
                        self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")
                except:
                    LastMonth = 0
                    ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
                    wb.save(str(Y)+"년 결제.xlsx")
                    wb.close()
                    self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")
                
            else:
                wb = load_workbook(str(Y-1)+"년 결제.xlsx")
                ws = wb.active
                lst = []
                Name = []## 결제 파일에 있는 사람 이름
                for x in range(500):
                    Name.append(ws['A'+str(x+4)].value)
                idx = Name.index(N)
                for x in range(12):
                    lst.append(ws[chr(98+x)+str(4+idx)].value)
                LST = []
                for x in range(len(lst)):
                    if lst[x] == None:
                        LST.append(x+1)
                a = [1,2,3,4,5,6,7,8,9,10,11,12]
                b = LST.copy()
                a_sub_b = [x for x in a if x not in b]
                LastMonth = a_sub_b[len(a_sub_b) - 1]
                ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
                wb.save(str(Y-1)+"년 결제.xlsx")
                wb.close()
                self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")
        except:
            try:
                wb = load_workbook(str(Y)+"년 결제.xlsx")
            except:
                make(Y)
                wb = load_workbook(str(Y)+"년 결제.xlsx")
            ws = wb.active
            lst = []
            Name = []## 결제 파일에 있는 사람 이름
            for x in range(500):
                Name.append(ws['A'+str(x+4)].value)
            idx = Name.index(N)
            for x in range(12):
                lst.append(ws[chr(98+x)+str(4+idx)].value)
            LST = []
            for x in range(len(lst)):
                if lst[x] == None:
                    LST.append(x+1)
            a = [1,2,3,4,5,6,7,8,9,10,11,12]
            b = LST.copy()
            a_sub_b = [x for x in a if x not in b]
            try:
                LastMonth = a_sub_b[len(a_sub_b) - 1]
                if LastMonth == 12:
                    ck(self,Y+1,N)
                else:
                    ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
                    wb.save(str(Y)+"년 결제.xlsx")
                    wb.close()
                    self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")
            except:
                LastMonth = 0
                ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
                wb.save(str(Y)+"년 결제.xlsx")
                wb.close()
                self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")
    except:
        wb = load_workbook(str(Y)+"년 결제.xlsx")
        ws = wb.active
        lst = []
        Name = []## 결제 파일에 있는 사람 이름
        for x in range(500):
            Name.append(ws['A'+str(x+4)].value)
        idx = Name.index(N)
        for x in range(12):
            lst.append(ws[chr(98+x)+str(4+idx)].value)
        LST = []
        for x in range(len(lst)):
            if lst[x] == None:
                LST.append(x+1)
        a = [1,2,3,4,5,6,7,8,9,10,11,12]
        b = LST.copy()
        a_sub_b = [x for x in a if x not in b]
        try:
            LastMonth = a_sub_b[len(a_sub_b) - 1]
            if LastMonth == 12:
                ck(self,Y+1,N)
            else:
                ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
                wb.save(str(Y)+"년 결제.xlsx")
                wb.close()
                self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")
        except:
            LastMonth = 0
            ws[chr(98+LastMonth)+str(4+idx)] = str(d.month) + "월" + str(d.day) + "일"
            wb.save(str(Y)+"년 결제.xlsx")
            wb.close()
            self.cnt.setPlainText(str(Y)+"년"+str(LastMonth+1)+"월")

def nm(self,Y,N):
    try:
        wb = load_workbook(str(Y-1)+"년 결제.xlsx")
        ws = wb.active

        lst = []
        Name = []## 결제 파일에 있는 사람 이름
        for x in range(500):
            Name.append(ws['A'+str(x+4)].value)
        try:
            idx = Name.index(N)
            for x in range(12):
                lst.append(ws[chr(98+x)+str(4+idx)].value)
            LST = []
            for x in range(len(lst)):
                if lst[x] == None:
                    LST.append(x+1)
            wb.save(str(Y-1)+"년 결제.xlsx")
            wb.close()
            a = [1,2,3,4,5,6,7,8,9,10,11,12]
            b = LST.copy()
            a_sub_b = [x for x in a if x not in b]
            LastMonth = a_sub_b[len(a_sub_b) - 1]
            if LastMonth == 12:
                try:
                    wb = load_workbook(str(Y)+"년 결제.xlsx")
                except:
                    make(Y)
                    wb = load_workbook(str(Y)+"년 결제.xlsx")
                ws = wb.active
                lst = []
                Name = []## 결제 파일에 있는 사람 이름
                for x in range(500):
                    Name.append(ws['A'+str(x+4)].value)
                idx = Name.index(N)
                for x in range(12):
                    lst.append(ws[chr(98+x)+str(4+idx)].value)
                LST = []
                for x in range(len(lst)):
                    if lst[x] == None:
                        LST.append(x+1)
                a = [1,2,3,4,5,6,7,8,9,10,11,12]
                b = LST.copy()
                a_sub_b = [x for x in a if x not in b]
                try:
                    LastMonth = a_sub_b[len(a_sub_b) - 1]
                    if LastMonth == 12:
                        nm(self,Y+1,N)
                    else:
                        wb.save(str(Y)+"년 결제.xlsx")
                        wb.close()
                        self.cnt.setPlainText(str(Y)+"년"+str(LastMonth)+"월")
                except:
                    LastMonth = 12
                    wb.save(str(Y)+"년 결제.xlsx")
                    wb.close()
                    self.cnt.setPlainText(str(Y-1)+"년"+str(LastMonth)+"월")
                
            else:
                wb = load_workbook(str(Y-1)+"년 결제.xlsx")
                ws = wb.active
                lst = []
                Name = []## 결제 파일에 있는 사람 이름
                for x in range(500):
                    Name.append(ws['A'+str(x+4)].value)
                idx = Name.index(N)
                for x in range(12):
                    lst.append(ws[chr(98+x)+str(4+idx)].value)
                LST = []
                for x in range(len(lst)):
                    if lst[x] == None:
                        LST.append(x+1)
                a = [1,2,3,4,5,6,7,8,9,10,11,12]
                b = LST.copy()
                a_sub_b = [x for x in a if x not in b]
                LastMonth = a_sub_b[len(a_sub_b) - 1]
                wb.save(str(Y-1)+"년 결제.xlsx")
                wb.close()
                self.cnt.setPlainText(str(Y-1)+"년"+str(LastMonth)+"월")
        except:
            try:
                wb = load_workbook(str(Y)+"년 결제.xlsx")
            except:
                make(Y)
                wb = load_workbook(str(Y)+"년 결제.xlsx")
            ws = wb.active
            lst = []
            Name = []## 결제 파일에 있는 사람 이름
            for x in range(500):
                Name.append(ws['A'+str(x+4)].value)
            idx = Name.index(N)
            for x in range(12):
                lst.append(ws[chr(98+x)+str(4+idx)].value)
            LST = []
            for x in range(len(lst)):
                if lst[x] == None:
                    LST.append(x+1)
            a = [1,2,3,4,5,6,7,8,9,10,11,12]
            b = LST.copy()
            a_sub_b = [x for x in a if x not in b]
            try:
                LastMonth = a_sub_b[len(a_sub_b) - 1]
                if LastMonth == 12:
                    nm(self,Y+1,N)
                else:
                    wb.save(str(Y)+"년 결제.xlsx")
                    wb.close()
                    self.cnt.setPlainText(str(Y)+"년"+str(LastMonth)+"월")
            except:
                LastMonth = 12
                wb.save(str(Y)+"년 결제.xlsx")
                wb.close()
                self.cnt.setPlainText(str(Y)+"년"+str(LastMonth)+"월")
    except:
        wb = load_workbook(str(Y)+"년 결제.xlsx")
        ws = wb.active
        lst = []
        Name = []## 결제 파일에 있는 사람 이름
        for x in range(500):
            Name.append(ws['A'+str(x+4)].value)
        idx = Name.index(N)
        for x in range(12):
            lst.append(ws[chr(98+x)+str(4+idx)].value)
        LST = []
        for x in range(len(lst)):
            if lst[x] == None:
                LST.append(x+1)
        a = [1,2,3,4,5,6,7,8,9,10,11,12]
        b = LST.copy()
        a_sub_b = [x for x in a if x not in b]
        try:
            LastMonth = a_sub_b[len(a_sub_b) - 1]
            if LastMonth == 12:
                nm(self,Y+1,N)
            else:
                wb.save(str(Y)+"년 결제.xlsx")
                wb.close()
                self.cnt.setPlainText(str(Y)+"년"+str(LastMonth)+"월")
        except:
            LastMonth = 12
            wb.save(str(Y)+"년 결제.xlsx")
            wb.close()
            self.cnt.setPlainText(str(Y)+"년"+str(LastMonth)+"월")
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
 
